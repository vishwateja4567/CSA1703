print(" 192311399 - M.Viswateja")
import heapq
GOAL = [[1, 2, 3],
        [4, 5, 6],
        [7, 8, 0]]  # 0 is the blank space
MOVES = [(-1, 0), (1, 0), (0, -1), (0, 1)]
def calculate_heuristic(state):
    misplaced = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] != 0 and state[i][j] != GOAL[i][j]:
                misplaced += 1
    return misplaced
def find_blank(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j
def to_tuple(board):
    return tuple(tuple(row) for row in board)
def a_star_solver(start):
    queue = []
    visited = set()
    heapq.heappush(queue, (calculate_heuristic(start), 0, start, []))
    
    while queue:
        f, g, current, path = heapq.heappop(queue)

        if current == GOAL:
            return path + [current]  
        
        visited.add(to_tuple(current))
        
        x, y = find_blank(current)
        
        for dx, dy in MOVES:
            nx, ny = x + dx, y + dy
            if 0 <= nx < 3 and 0 <= ny < 3:
                new_state = [row[:] for row in current]
                new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]

                if to_tuple(new_state) not in visited:
                    h = calculate_heuristic(new_state)
                    heapq.heappush(queue, (g + 1 + h, g + 1, new_state, path + [current]))
    
    return None 
def print_board(board):
    for row in board:
        print(" ".join(str(cell) if cell != 0 else " " for cell in row))
    print()
def main():
    print("  Enter the initial 8-puzzle state (use 0 for blank):")
    start = []
    for i in range(3):
        row = list(map(int, input(f"Row {i + 1}: ").split()))
        start.append(row)

    print("\n  Solving using A* Algorithm...\n")
    solution_path = a_star_solver(start)

    if solution_path:
        for i, step in enumerate(solution_path):
            print(f"Step {i}:")
            print_board(step)
        print(f" Puzzle solved in {len(solution_path) - 1} moves.")
    else:
        print("\ No solution found.")

main()
